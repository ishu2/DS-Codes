public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

	public static boolean checkBalanced(BinaryTreeNode<Integer> root){
		
		if (root == null)
		{
			return true;
		}
		if (root.left == null && root.right == null)
		{
			return true;
		}
		boolean res1=checkBalanced(root.left);
		boolean res2=checkBalanced(root.right);
		if(!res1 || !res2)
		{
			return false;
		}
		int h1 = height(root.left);
		int h2 = height(root.right);
		if ((h1 + 1 == h2) || (h2 + 1 == h1) || (h1 == h2))
		{
			return true;
		}
		else
		{
			return false;
		}
		
	}
	private static int height(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return 0;
		}
		int h1 = 0;
		int h2 = 0;
		h1 = h1 + height(root.left);
		h2 = h2 + height(root.right);
		if (h1 > h2)
		{
			return h1 + 1;
		} 
		else
		{
			return h2 + 1;
		}
	}


	
	
}
